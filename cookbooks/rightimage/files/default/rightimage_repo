#!/bin/bash
# Copyright (c) 2013 by RightScale Inc., all rights reserved
# chkconfig: 2345 95 01
# description: RightScale RightLink updater. \
#   This script is used to update the rightlink package at boot time, as a \
#   debugging aid.  If you have any questions feel free to contact RightScale.
#
## suse init info
### BEGIN INIT INFO
# Provides:          rightimage
# Required-Start:    $syslog $remote_fs $network $named
# Required-Stop:     $syslog $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: RightLink agent updater
# Description:       Updates the RightLink agent when a rs_agent_dev:package= tag is provided
# X-Start-Before:    amazon rightlink rightscale rightboot
# X-Stop-After:      amazon
### END INIT INFO

#############################################################################
## Setup environment used by the remainder of this script
#############################################################################

. /opt/rightscale/etc/init.d/rightscale_functions

#Set Root Home and working directory for temp files
export WORKING_DIR=/var/cache/rightscale/tarballs
# TBD: find out where this is going to reside for real, once its determined
# TBD: finish up support for repos
export RIGHTLINK_DEV_REPO=http://rightlink-dev.s3.amazonaws.com

###############################################################################
## Define some functions to be called by the start() function (see below)
###############################################################################


function download_tarball() {
  local working_dir=$1
  local url=$2
  local curl_opt=(-s -S -f -L --retry 7)

  local tarball_name=`basename $url`
  local file_on_disk=$working_dir/$tarball_name
  local code=500
  mkdir -p $working_dir
  logger -st RightScale "Downloading $tarball_name to $working_dir from $url"
  if url_exists $url; then
    curl "${curl_opt[@]}" -o $file_on_disk $url
  else
    logger -st RightScale "ERROR: Tarball url $url doesn't exist"
    exit 1;
  fi

  if [ ! -e $file_on_disk ]; then
    logger -st RightScale "ERROR: Failed to download tarball from from $url"
    exit 1;
  fi
}

function enable_repos() {
  local url=$1
  if [ "$RS_BASE_OS" = "redhat" ]; then
    if ! is_simple_repo $url; then
      url="$url/1/el/\$releasever/\$basearch"
    fi
  fi
  if [ "$RS_BASE_OS" = "redhat" ]; then
    cat >/etc/yum.repos.d/rightlink.repo<<-EOF
[rightlink]
name=RightScale RightLink
baseurl=$url
enabled=1
gpgcheck=0
priority=1
EOF
  elif [ "$RS_BASE_OS" = "debian" ]; then
    local codename=`lsb_release -cs`
    if [ -z "$codename" ]; then
      logger -st RightScale "ERROR: Need lsb_release installed to use package override mode!"
      exit 1
    fi
    echo "deb $url $codename main" > /etc/apt/sources.list.d/rightlink.list
    apt-get update > /dev/null
  else
    logger -st RightScale "Package override tag currently not supported on SUSE"
    exit 1
  fi
}

function disable_repos() {
  if [ "$RS_BASE_OS" = "redhat" ]; then
    sed -i s/enabled=1/enabled=0/ /etc/yum.repos.d/rightlink.repo
  elif [ "$RS_BASE_OS" = "debian" ]; then
    sed -i s/^deb/#deb/ /etc/apt/sources.list.d/rightlink.list
    apt-get update > /dev/null
  fi
}

function url_exists() {
  local url=$1
  local curl_opt=(--silent --show-error --fail --location --head --retry 7)
  for attempt in 1 2 3; do
    code=`curl "${curl_opt[@]}" -w '%{http_code}' -o /dev/null $url 2>/dev/null`
    # 000 indicates network error, sometimes network takes a little time to settle on Azure
    # 500 errors can be temporary, so retry after a little bit
    if [[ $code -ge 500 ]] || [[ "$code" == "000" ]]; then
      logger -st RightScale "url_exists for $url encountered code $code, retry attempt $attempt"
      sleep 10
    elif [[ $code -ge 200 ]] && [[ $code -le 299 ]]; then
      return 0
    else
      return 1
    fi
  done
  logger -st RightScale "url_exists is done retrying"
  return 1
}

function install_packages() {
  local version=$1

  if [ "$RS_BASE_OS" = "debian" ]; then
    pkg_cmd='apt-get install -y'
    version_sep="="
  else
    pkg_cmd='yum install -y'
    version_sep="-"
  fi

  if [ -z "$version" ]; then
    logger -st RightScale "Installing packages rightlink, rightlink-sandbox with latest version"
    $pkg_cmd rightlink rightlink-sandbox
  else
    logger -st RightScale "Installing packages rightlink, rightlink-sandbox with version=$version"
    $pkg_cmd rightlink${version_sep}${version} rightlink-sandbox${version_sep}${version}
  fi
  result=$?
  if [ $result -ne 0 ]; then
    logger -st RightScale "Failed to install package, result was $result. Cannot continue."
    exit 1
  fi
}

function install_tarball() {
  if [ "$RS_BASE_OS" = "debian" ]; then
    pkg_cmd='apt-get purge -y'
  else
    pkg_cmd='yum remove -y'
  fi
  $pkg_cmd rightlink || true
  mkdir -p /opt
  tar -C /opt/ -zxf $1/$2

  chmod +x /opt/rightscale/bin/*

  if [[ -e /opt/rightscale/bin/post_install_dev.sh ]]; then
    /opt/rightscale/bin/post_install_dev.sh
  else
    /opt/rightscale/bin/post_install.sh
  fi
}

function is_simple_repo() {
  local repourl=$1
  if [ "$RS_BASE_OS" == "debian" ]; then
    return 1
  elif [ "$RS_BASE_OS" == "redhat" ]; then
    if url_exists "$repourl/repodata/repomd.xml"; then
      return 0
    else
      return 1
    fi
  fi
  return 1
}

function start() {
  # If RS_SRC is not defined in userdata, we're booting in "production mode."
  # In this case, we will use the rightlink already on disk.
  # If RS_SRC is defined in userdata, we're booting in "development mode."
  # RS_SRC must be a url pointing to either a tarball or yum/apt repo, in
  # which case:
  #  If repo: Setup the repo pointed to by the URL and upgrade the package
  #  If tarball: Remove the rightlink package (but not the sandbox), and
  #    untar the tarball to /opt/rightscale. Run post_install_dev.sh script.

  init_os_state
  configure_proxy
  init_cloud_state 1

  export DEBIAN_FRONTEND=noninteractive

  # Check that networking is up. (Only works on Redhat-based systems.)
  [ "${NETWORKING}" == "no" ] && exit 1

  if [ -e /var/lib/rightscale/right_link/booted ]; then
    # If booted is already set, don't try to update a second time
    logger -st RightScale "Starting RightLink"
    exit 0
  elif [ -z $RS_SRC ]; then
    logger -st RightScale "Starting RightLink"
    exit 0
  else
    logger -st RightScale "Running RightLink updater"
  fi

  if [[ $RS_SRC =~ \.tar|\.tgz|\.tbz ]]; then 
    logger -st RightScale "Fetching and installing RightLink development tarball from $RS_SRC"
    tarball_name=`basename $RS_SRC`
    download_tarball $WORKING_DIR $RS_SRC
    install_tarball $WORKING_DIR $tarball_name
  elif [[ $RS_SRC =~ http ]]; then 
    if [[ $RS_SRC =~ @ ]]; then
      IFS='@' read -a url_parts <<< "$RS_SRC"
      RS_SRC=${url_parts[0]}
      VERSION=${url_parts[1]}
    fi
    logger -st RightScale "Installing RightLink development packages from repo $RS_SRC"
    enable_repos $RS_SRC
    install_packages $VERSION
    disable_repos
  else
    logger -st RightScale "Installing RightLink development packages with version $RS_SRC from dev repo $RIGHTLINK_DEV_REPO"
    enable_repos $RIGHTLINK_DEV_REPO
    install_packages $RS_SRC
    disable_repos
  fi
  service rightboot start
  service rightscale start
  service rightlink start
  exit 0
}

function stop() {
  exit 0
}

# See how we were called.
case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  *)
    echo "Usage: $0 start|stop"
    exit 255
    ;;
esac
