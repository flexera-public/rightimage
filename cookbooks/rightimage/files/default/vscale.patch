diff --git a/lib/clouds/clouds/vscale.rb b/lib/clouds/clouds/vscale.rb
new file mode 100644
index 0000000..b26f886
--- /dev/null
+++ b/lib/clouds/clouds/vscale.rb
@@ -0,0 +1,140 @@
+#
+# Copyright (c) 2011 RightScale Inc
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be
+# included in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+USER_SSH_DIR = "/root/.ssh"
+AUTH_KEYS_FILE = "#{USER_SSH_DIR}/authorized_keys"
+
+# dependencies.
+metadata_source 'metadata_sources/file_metadata_source'
+metadata_writers 'metadata_writers/dictionary_metadata_writer',
+                 'metadata_writers/ruby_metadata_writer',
+                 'metadata_writers/shell_metadata_writer'
+
+# set abbreviation for non-RS env var generation
+abbreviation :vs
+
+# Parses vsoup user metadata into a hash.
+#
+# === Parameters
+# tree_climber(MetadataTreeClimber):: tree climber
+# data(String):: raw data
+#
+# === Return
+# result(Hash):: Hash-like leaf value
+def create_user_metadata_leaf(tree_climber, data)
+  result = tree_climber.create_branch
+  ::RightScale::CloudUtilities.split_metadata(data.strip, "\n", result)
+  result
+end
+
+def cloud_metadata_is_flat(clazz, path, query_result)
+  false
+end
+
+# userdata defaults
+default_option([:metadata_source, :user_metadata_source_file_path], '/mnt/metadata/user.txt')
+default_option([:user_metadata, :metadata_tree_climber, :create_leaf_override], method(:create_user_metadata_leaf))
+
+# cloud metadata defaults
+default_option([:metadata_source, :cloud_metadata_source_file_path], '/mnt/metadata/meta.txt')
+default_option([:cloud_metadata, :metadata_tree_climber, :create_leaf_override], method(:create_user_metadata_leaf))
+# vscale cloud_metadata is flat, so paths will never have children -- always return false
+default_option([:cloud_metadata, :metadata_tree_climber, :has_children_override], method(:cloud_metadata_is_flat))
+
+
+# Determines if the current instance is running on vsoup.
+#
+# === Return
+# true if running on rackspace
+def is_current_cloud?
+  return true
+end
+
+# Updates the given node with cloud metadata details.
+#
+# === Return
+# always true
+def update_details
+  if platform.windows?
+    # administrator password setting not yet supported
+  else
+    # update authorized_keys file from metadata
+    public_key = get_public_ssh_key_from_metadata()
+    update_authorized_keys(public_key)
+  end
+
+  # this method is supposed to return a hash to merge
+  # into the Chef node, so return empty hash.
+  {}
+end
+
+# Gets public key string from cloud metadata file
+#
+# === Return
+# public_key(String):: A public SSH key
+def get_public_ssh_key_from_metadata
+  public_key = nil
+  begin
+    # load metadata from file
+    meta_data_file = ::File.join(AgentConfig.cloud_state_dir, 'meta-data.rb')
+    load(meta_data_file)
+    public_key = ENV['VS_SSH_PUBLIC_KEY']
+
+    # was there a key found?
+    if public_key.nil? || public_key.empty?
+      logger.warn("No public SSH key found in metadata")
+      return
+    end
+  rescue Exception => e
+    logger.warn("Failed to load metadata!", e)
+  end
+  public_key
+end
+
+# Add public key to ssh authorized_keys file
+#
+# If the file does not exist, it will be created.
+# If the key already exists, it will not be added again.
+#
+# === Parameters
+# public_key(String):: public ssh key
+#
+# === Return
+# result(Hash):: Hash-like leaf value
+def update_authorized_keys(public_key)
+  if public_key.nil? || public_key.empty?
+    logger.warn("No public SSH key specified -- no modifications to #{AUTH_KEYS_FILE} made.")
+    return
+  end
+
+  FileUtils.mkdir_p(USER_SSH_DIR) # make sure the directory exists
+
+  existing_keys = ""
+  File.open(AUTH_KEYS_FILE, "r") { |f| existing_keys = f.read() } if File.exists?(AUTH_KEYS_FILE)
+  if existing_keys.include?(public_key)
+    logger.info "Public ssh key for root already exists in #{AUTH_KEYS_FILE}."
+  else
+    logger.info "Appending public ssh key to #{AUTH_KEYS_FILE}."
+    File.open(AUTH_KEYS_FILE, "a") { |f| f.puts(public_key) }
+  end
+  true
+end
diff --git a/scripts/cloud_controller.rb b/scripts/cloud_controller.rb
index 3d6423e..4c8bade 100644
--- a/scripts/cloud_controller.rb
+++ b/scripts/cloud_controller.rb
@@ -83,7 +83,7 @@ module RightScale
           case action
             when :bootstrap
               # bootstrap is shorthand for all standard actions performed on boot
-              result += [:clear_state, :wait_for_instance_ready, :write_cloud_metadata, :write_user_metadata, :wait_for_eip]
+              result += [:clear_state, :wait_for_instance_ready, :write_cloud_metadata, :update_details, :write_user_metadata, :wait_for_eip]
               only_if = true
             else
               result << action
